const express = require('express');
const router = express.Router();
const nodemailer = require('nodemailer');
const axios = require('axios');
const User = require('../models/User');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const requireAuth = (req, res, next) => {
  if (req.isAuthenticated()) {
    return next();
  }
  res.status(401).json({ message: 'Authentication required' });
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransporter({
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const sendEmailNotification = async (to, subject, html) => {
  try {
    const mailOptions = {
      from: process.env.SMTP_USER,
      to: to,
      subject: subject,
      html: html
    };
    
    await transporter.sendMail(mailOptions);
    return true;
  } catch (error) {
    console.error('Email sending error:', error);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const sendTelegramNotification = async (chatId, message) => {
  try {
    if (!process.env.TELEGRAM_BOT_TOKEN || !chatId) {
      return false;
    }
    
    const response = await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
    
    return response.status === 200;
  } catch (error) {
    console.error('Telegram sending error:', error);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ OneSignal
const sendPushNotification = async (userId, title, message, data = {}) => {
  try {
    if (!process.env.ONESIGNAL_APP_ID) {
      return false;
    }
    
    const notification = {
      app_id: process.env.ONESIGNAL_APP_ID,
      include_external_user_ids: [userId.toString()],
      headings: { en: title },
      contents: { en: message },
      data: data
    };
    
    const response = await axios.post('https://onesignal.com/api/v1/notifications', notification, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Basic ${process.env.ONESIGNAL_REST_API_KEY || ''}`
      }
    });
    
    return response.status === 200;
  } catch (error) {
    console.error('Push notification error:', error);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
router.post('/response-sent', requireAuth, async (req, res) => {
  try {
    const { vacancyTitle, companyName, responseId } = req.body;
    
    const user = req.user;
    const notificationData = {
      type: 'response_sent',
      responseId,
      vacancyTitle,
      companyName
    };
    
    const results = {
      email: false,
      telegram: false,
      push: false
    };
    
    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.email) {
      const emailHtml = `
        <h2>–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</h2>
        <p>–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é <strong>"${vacancyTitle}"</strong> –≤ –∫–æ–º–ø–∞–Ω–∏–∏ <strong>"${companyName}"</strong> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</p>
        <p>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p>
        <hr>
        <p><small>HH Finder - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã</small></p>
      `;
      
      results.email = await sendEmailNotification(
        user.email,
        '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        emailHtml
      );
    }
    
    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.telegram && user.settings.telegramChatId) {
      const telegramMessage = `
üéØ <b>–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

üìã –í–∞–∫–∞–Ω—Å–∏—è: ${vacancyTitle}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${companyName}
‚úÖ –°—Ç–∞—Ç—É—Å: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω

–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.
      `;
      
      results.telegram = await sendTelegramNotification(
        user.settings.telegramChatId,
        telegramMessage
      );
    }
    
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.push) {
      results.push = await sendPushNotification(
        user._id,
        '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
        `–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ "${vacancyTitle}" –≤ "${companyName}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`,
        notificationData
      );
    }
    
    res.json({
      success: true,
      message: 'Notifications sent',
      results
    });
    
  } catch (error) {
    console.error('Notification sending error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to send notifications',
      error: error.message
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–æ–≤
router.post('/limit-warning', requireAuth, async (req, res) => {
  try {
    const { remainingResponses } = req.body;
    
    const user = req.user;
    const results = {
      email: false,
      telegram: false,
      push: false
    };
    
    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.email) {
      const emailHtml = `
        <h2>–í–Ω–∏–º–∞–Ω–∏–µ! –õ–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω</h2>
        <p>–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <strong>${remainingResponses}</strong> –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ.</p>
        <p>–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.</p>
        <hr>
        <p><small>HH Finder - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã</small></p>
      `;
      
      results.email = await sendEmailNotification(
        user.email,
        '–õ–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω',
        emailHtml
      );
    }
    
    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.telegram && user.settings.telegramChatId) {
      const telegramMessage = `
‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>

üìä –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–∫–ª–∏–∫–æ–≤: ${remainingResponses}
üí≥ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã —Å HH Finder!
      `;
      
      results.telegram = await sendTelegramNotification(
        user.settings.telegramChatId,
        telegramMessage
      );
    }
    
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.push) {
      results.push = await sendPushNotification(
        user._id,
        '–õ–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω',
        `–û—Å—Ç–∞–ª–æ—Å—å ${remainingResponses} –æ—Ç–∫–ª–∏–∫–æ–≤. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.`,
        { type: 'limit_warning', remainingResponses }
      );
    }
    
    res.json({
      success: true,
      message: 'Limit warning notifications sent',
      results
    });
    
  } catch (error) {
    console.error('Limit warning notification error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to send limit warning notifications',
      error: error.message
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
router.post('/new-vacancies', requireAuth, async (req, res) => {
  try {
    const { searchName, vacanciesCount, vacancies } = req.body;
    
    const user = req.user;
    const results = {
      email: false,
      telegram: false,
      push: false
    };
    
    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.email) {
      const vacanciesList = vacancies.slice(0, 5).map(v => 
        `<li><strong>${v.title}</strong> - ${v.company.name}</li>`
      ).join('');
      
      const emailHtml = `
        <h2>–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!</h2>
        <p>–ü–æ –ø–æ–∏—Å–∫—É <strong>"${searchName}"</strong> –Ω–∞–π–¥–µ–Ω–æ <strong>${vacanciesCount}</strong> –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.</p>
        <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</h3>
        <ul>${vacanciesList}</ul>
        <p><a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/dashboard">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É</a></p>
        <hr>
        <p><small>HH Finder - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã</small></p>
      `;
      
      results.email = await sendEmailNotification(
        user.email,
        `–ù–∞–π–¥–µ–Ω–æ ${vacanciesCount} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`,
        emailHtml
      );
    }
    
    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.telegram && user.settings.telegramChatId) {
      const telegramMessage = `
üîç <b>–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!</b>

üìã –ü–æ–∏—Å–∫: ${searchName}
üìä –ù–∞–π–¥–µ–Ω–æ: ${vacanciesCount} –≤–∞–∫–∞–Ω—Å–∏–π

${vacancies.slice(0, 3).map(v => `‚Ä¢ ${v.title} - ${v.company.name}`).join('\n')}

–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!
      `;
      
      results.telegram = await sendTelegramNotification(
        user.settings.telegramChatId,
        telegramMessage
      );
    }
    
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.settings.notifications.push) {
      results.push = await sendPushNotification(
        user._id,
        '–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!',
        `–ü–æ–∏—Å–∫ "${searchName}": –Ω–∞–π–¥–µ–Ω–æ ${vacanciesCount} –≤–∞–∫–∞–Ω—Å–∏–π`,
        { type: 'new_vacancies', searchName, vacanciesCount }
      );
    }
    
    res.json({
      success: true,
      message: 'New vacancies notifications sent',
      results
    });
    
  } catch (error) {
    console.error('New vacancies notification error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to send new vacancies notifications',
      error: error.message
    });
  }
});

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router.post('/test', requireAuth, async (req, res) => {
  try {
    const { type } = req.body;
    
    const user = req.user;
    const results = {
      email: false,
      telegram: false,
      push: false
    };
    
    const testMessage = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HH Finder';
    
    // Email —Ç–µ—Å—Ç
    if (type === 'email' || type === 'all') {
      const emailHtml = `
        <h2>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h2>
        <p>${testMessage}</p>
        <p>–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
        <hr>
        <p><small>HH Finder - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã</small></p>
      `;
      
      results.email = await sendEmailNotification(
        user.email,
        '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HH Finder',
        emailHtml
      );
    }
    
    // Telegram —Ç–µ—Å—Ç
    if ((type === 'telegram' || type === 'all') && user.settings.telegramChatId) {
      const telegramMessage = `
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

${testMessage}

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
      `;
      
      results.telegram = await sendTelegramNotification(
        user.settings.telegramChatId,
        telegramMessage
      );
    }
    
    // Push —Ç–µ—Å—Ç
    if (type === 'push' || type === 'all') {
      results.push = await sendPushNotification(
        user._id,
        '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        testMessage,
        { type: 'test' }
      );
    }
    
    res.json({
      success: true,
      message: 'Test notifications sent',
      results
    });
    
  } catch (error) {
    console.error('Test notification error:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to send test notifications',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/status', requireAuth, (req, res) => {
  res.json({
    success: true,
    notifications: req.user.settings.notifications,
    telegramChatId: req.user.settings.telegramChatId
  });
});

module.exports = router;
