const nodemailer = require('nodemailer');
const axios = require('axios');

class NotificationService {
  constructor() {
    this.emailTransporter = this.createEmailTransporter();
    this.telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    this.onesignalAppId = process.env.ONESIGNAL_APP_ID;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è email
  createEmailTransporter() {
    return nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.mail.ru',
      port: process.env.SMTP_PORT || 587,
      secure: false,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–∏–∫–µ
  async sendResponseNotification(user, response) {
    const notifications = [];

    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.notifications?.email) {
      try {
        await this.sendEmailNotification(user, 'response_sent', {
          vacancyTitle: response.vacancy.title,
          companyName: response.vacancy.company.name,
          sentAt: response.sentAt
        });
        notifications.push('email');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      }
    }

    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.notifications?.telegram && user.telegramChatId) {
      try {
        await this.sendTelegramNotification(user.telegramChatId, 'response_sent', {
          vacancyTitle: response.vacancy.title,
          companyName: response.vacancy.company.name,
          sentAt: response.sentAt
        });
        notifications.push('telegram');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:', error);
      }
    }

    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.notifications?.push && user.onesignalPlayerId) {
      try {
        await this.sendPushNotification(user.onesignalPlayerId, 'response_sent', {
          vacancyTitle: response.vacancy.title,
          companyName: response.vacancy.company.name
        });
        notifications.push('push');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push:', error);
      }
    }

    return notifications;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
  async sendInvitationNotification(user, response) {
    const notifications = [];

    // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.notifications?.email) {
      try {
        await this.sendEmailNotification(user, 'invitation_received', {
          vacancyTitle: response.vacancy.title,
          companyName: response.vacancy.company.name,
          respondedAt: response.respondedAt
        });
        notifications.push('email');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      }
    }

    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.notifications?.telegram && user.telegramChatId) {
      try {
        await this.sendTelegramNotification(user.telegramChatId, 'invitation_received', {
          vacancyTitle: response.vacancy.title,
          companyName: response.vacancy.company.name,
          respondedAt: response.respondedAt
        });
        notifications.push('telegram');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:', error);
      }
    }

    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (user.notifications?.push && user.onesignalPlayerId) {
      try {
        await this.sendPushNotification(user.onesignalPlayerId, 'invitation_received', {
          vacancyTitle: response.vacancy.title,
          companyName: response.vacancy.company.name
        });
        notifications.push('push');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push:', error);
      }
    }

    return notifications;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendEmailNotification(user, type, data) {
    const templates = {
      response_sent: {
        subject: '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        html: `
          <h2>–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</h2>
          <p>–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é <strong>${data.vacancyTitle}</strong> –≤ –∫–æ–º–ø–∞–Ω–∏–∏ <strong>${data.companyName}</strong> –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</p>
          <p>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date(data.sentAt).toLocaleString('ru-RU')}</p>
          <p>–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞.</p>
        `
      },
      invitation_received: {
        subject: '–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!',
        html: `
          <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!</h2>
          <p>–ö–æ–º–ø–∞–Ω–∏—è <strong>${data.companyName}</strong> –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –≤–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ <strong>${data.vacancyTitle}</strong>.</p>
          <p>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${new Date(data.respondedAt).toLocaleString('ru-RU')}</p>
          <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!</p>
        `
      },
      search_completed: {
        subject: '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω',
        html: `
          <h2>–ü–æ–∏—Å–∫ "${data.searchName}" –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
          <p>–í–∞—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.</p>
          <p>–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${data.responsesSent}</p>
          <p>–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${data.invitations}</p>
        `
      },
      search_error: {
        subject: '–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ',
        html: `
          <h2>–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ "${data.searchName}"</h2>
          <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.</p>
          <p>–û—à–∏–±–∫–∞: ${data.errorMessage}</p>
          <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞.</p>
        `
      }
    };

    const template = templates[type];
    if (!template) {
      throw new Error(`–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const mailOptions = {
      from: process.env.SMTP_FROM || process.env.SMTP_USER,
      to: user.email,
      subject: template.subject,
      html: template.html
    };

    await this.emailTransporter.sendMail(mailOptions);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendTelegramNotification(chatId, type, data) {
    const templates = {
      response_sent: `‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\nüìã –í–∞–∫–∞–Ω—Å–∏—è: ${data.vacancyTitle}\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${data.companyName}\n‚è∞ –í—Ä–µ–º—è: ${new Date(data.sentAt).toLocaleString('ru-RU')}`,
      invitation_received: `üéâ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\nüìã –í–∞–∫–∞–Ω—Å–∏—è: ${data.vacancyTitle}\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${data.companyName}\n‚è∞ –í—Ä–µ–º—è: ${new Date(data.respondedAt).toLocaleString('ru-RU')}`,
      search_completed: `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n\nüîç –ü–æ–∏—Å–∫: ${data.searchName}\nüì§ –û—Ç–∫–ª–∏–∫–æ–≤: ${data.responsesSent}\nüéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${data.invitations}`,
      search_error: `‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ\n\nüîç –ü–æ–∏—Å–∫: ${data.searchName}\n‚ö†Ô∏è –û—à–∏–±–∫–∞: ${data.errorMessage}`
    };

    const message = templates[type];
    if (!message) {
      throw new Error(`–®–∞–±–ª–æ–Ω Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const url = `https://api.telegram.org/bot${this.telegramBotToken}/sendMessage`;
    
    await axios.post(url, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendPushNotification(playerId, type, data) {
    const templates = {
      response_sent: {
        title: '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        message: `–û—Ç–∫–ª–∏–∫ –Ω–∞ ${data.vacancyTitle} –≤ ${data.companyName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`
      },
      invitation_received: {
        title: '–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!',
        message: `${data.companyName} –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –≤–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ`
      },
      search_completed: {
        title: '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω',
        message: `–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${data.responsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤`
      },
      search_error: {
        title: '–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ',
        message: `–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ: ${data.errorMessage}`
      }
    };

    const template = templates[type];
    if (!template) {
      throw new Error(`–®–∞–±–ª–æ–Ω push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${type} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const url = 'https://onesignal.com/api/v1/notifications';
    
    await axios.post(url, {
      app_id: this.onesignalAppId,
      include_player_ids: [playerId],
      headings: { en: template.title },
      contents: { en: template.message },
      data: { type, ...data }
    }, {
      headers: {
        'Authorization': `Basic ${process.env.ONESIGNAL_REST_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendTestNotification(user, type = 'all') {
    const results = {};

    if (type === 'all' || type === 'email') {
      try {
        await this.sendEmailNotification(user, 'response_sent', {
          vacancyTitle: '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
          companyName: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
          sentAt: new Date()
        });
        results.email = true;
      } catch (error) {
        results.email = false;
        results.emailError = error.message;
      }
    }

    if (type === 'all' || type === 'telegram') {
      try {
        await this.sendTelegramNotification(user.telegramChatId, 'response_sent', {
          vacancyTitle: '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
          companyName: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
          sentAt: new Date()
        });
        results.telegram = true;
      } catch (error) {
        results.telegram = false;
        results.telegramError = error.message;
      }
    }

    if (type === 'all' || type === 'push') {
      try {
        await this.sendPushNotification(user.onesignalPlayerId, 'response_sent', {
          vacancyTitle: '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
          companyName: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
        });
        results.push = true;
      } catch (error) {
        results.push = false;
        results.pushError = error.message;
      }
    }

    return results;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook
  async setupTelegramWebhook() {
    if (!this.telegramBotToken) {
      throw new Error('Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const webhookUrl = `${process.env.BASE_URL}/api/notifications/telegram/webhook`;
    
    const url = `https://api.telegram.org/bot${this.telegramBotToken}/setWebhook`;
    
    await axios.post(url, {
      url: webhookUrl
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
  async handleTelegramMessage(update) {
    const message = update.message;
    if (!message) return;

    const chatId = message.chat.id;
    const text = message.text;

    if (text === '/start') {
      await this.sendTelegramNotification(chatId, 'welcome', {});
    } else if (text === '/help') {
      await this.sendTelegramNotification(chatId, 'help', {});
    } else if (text.startsWith('/subscribe')) {
      // –õ–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.sendTelegramNotification(chatId, 'subscribed', {});
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendBulkNotification(users, type, data) {
    const results = {
      total: users.length,
      sent: 0,
      failed: 0,
      errors: []
    };

    for (const user of users) {
      try {
        await this.sendNotification(user, type, data);
        results.sent++;
      } catch (error) {
        results.failed++;
        results.errors.push({
          userId: user._id,
          error: error.message
        });
      }
    }

    return results;
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendNotification(user, type, data) {
    const notifications = [];

    if (user.notifications?.email) {
      try {
        await this.sendEmailNotification(user, type, data);
        notifications.push('email');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ email:', error);
      }
    }

    if (user.notifications?.telegram && user.telegramChatId) {
      try {
        await this.sendTelegramNotification(user.telegramChatId, type, data);
        notifications.push('telegram');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ telegram:', error);
      }
    }

    if (user.notifications?.push && user.onesignalPlayerId) {
      try {
        await this.sendPushNotification(user.onesignalPlayerId, type, data);
        notifications.push('push');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ push:', error);
      }
    }

    return notifications;
  }
}

module.exports = new NotificationService();
